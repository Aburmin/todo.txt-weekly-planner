#!/usr/bin/python

import sys
import os
import re
import datetime
import collections
import termcolor

action = sys.argv[ 1 ]
flag = sys.argv[ 2 ]

homeDir = os.getenv( 'HOME' )
allocationsConf = os.path.join(
        homeDir, '.todo.actions.d/wp/allocations.conf' )
todoFile = os.getenv( 'TODO_FILE' )
doneFile = os.getenv( 'DONE_FILE' )

def timeStr( timeMins ):
    return "%s mins (%.1f hrs)" % ( timeMins, int( timeMins ) / 60.0 )

def doAddTask( newTask ):
    estimate = re.search( "est:(\d+)", newTask )
    if not estimate:
        print "Task is missing estimate !!"
        return
    with open( todoFile, "a" ) as f:
        f.write( newTask )

def projectsInAlloc():
    lines = None
    allocations = { }
    with open( allocationsConf, "r" ) as f:
        for line in f.readlines():
            project, timeMins = line.strip().split( ":" )
            allocations[ project ] = int( timeMins )
    return allocations

def getSundayOfTheWeek( anyDayOfWeek ):
    dayOfWeek = datetime.date( *tuple(
            [ int( x ) for x in anyDayOfWeek.split( "-" ) ] ) )
    dayIndex = dayOfWeek.isoweekday() % 7
    sundayOfTheWeek = dayOfWeek - datetime.timedelta( days=dayIndex )
    return sundayOfTheWeek

def getMinorEst( line ):
    match = re.search( "min:(\d+)", line )
    if match:
        return int( match.group( 1 ) )
    else:
        match = re.search( "est:(\d+)", line )
        assert match
        return int( match.group( 1 ) )

def timeSpentOnWeek( anyDayOfWeek=None, projects=None ):
    if not projects:
        projects = projectsInAlloc().keys()
    if not anyDayOfWeek:
        anyDayOfWeek = datetime.date.today().isoformat()
    sundayOfTheWeek = getSundayOfTheWeek( anyDayOfWeek )
    daysOfWeek = [ 
            ( sundayOfTheWeek + datetime.timedelta( days=x ) ).isoformat()
            for x in range( 7 ) ]  
    searchRegex = ( 
            r"^x (%s).*(%s)" %
            ( "|".join( daysOfWeek ), 
              "|".join( [ x.replace( "+", "\+" ) for x in projects ] ) ) )
    timeSpent = collections.defaultdict( lambda: 0 ) 
    with open( doneFile, "r" ) as f:
        for line in f.readlines():
            match = re.search( searchRegex, line )
            if match:
                project = match.group( 2 )
                timeSpent[ project ] = ( 
                        timeSpent[ project ] + getMinorEst( line ) )
    return timeSpent

def summaryForWeek( anyDayOfWeek, projects=None ):
    if not projects:
        projects = projectsInAlloc().keys()
    sundayOfThisWeek = getSundayOfTheWeek( 
            datetime.date.today().isoformat() )
    sundayOfGivenDay = getSundayOfTheWeek( anyDayOfWeek )
    allocations = projectsInAlloc()
    timeSpent = timeSpentOnWeek( anyDayOfWeek, projects=projects )
    if sundayOfThisWeek == sundayOfGivenDay:
        # This week
        for project in projects:
            timeAllocated = allocations[ project ]
            timeCompleted = timeSpent[ project ]
            color = getColorForGraphLine( timeCompleted, timeAllocated )
            percentComplete = ( 
                    timeSpent[ project ] * 100.0 / timeAllocated )
            def colored_print( string ):
                print termcolor.colored( string, color )

            print termcolor.colored( project, "cyan" )
            colored_print( 
                    "Total time allocated: %s" % timeStr( timeAllocated ) )
            colored_print(
                    "Total time spent: %s" % timeStr( timeCompleted ) )
            colored_print(
                    "Total time left: %s" % timeStr( 
                        timeAllocated - timeCompleted ) )
            colored_print( "Percent complete: %.1f%%" % percentComplete )
    else:
        for project in projects:
            print project
            print "Total time spent: %s" % timeStr( timeSpent[ project ] )

def getConvertedNumberForGraph( number, maxNumber, reference ):
    return ( number * reference ) / maxNumber

def getColorForGraphLine( timeCompleted, timeAllocated ):
    percentComplete = ( timeCompleted * 100 ) / timeAllocated
    if percentComplete >= 80:
        return "green"
    elif percentComplete >= 50:
        return "cyan"
    else:
        return "red"

def printGraph( projects ):
    allocations = projectsInAlloc()
    if not projects:
        projects = allocations.keys()
    timeSpent = timeSpentOnWeek( None, projects=allocations.keys())
    maxNumberRef = max( timeSpent.values() + allocations.values() )
    _, columns = os.popen('stty size', 'r').read().split()
    convertedMaxNumberRef = int( columns ) / 2
    for project in projects:
        timeAllocated = allocations[ project ]
        timeCompleted = timeSpent[ project ]
        print project
        color = getColorForGraphLine( timeCompleted, timeAllocated )
        lineForCompleted = "=" * getConvertedNumberForGraph( 
                timeCompleted, maxNumberRef, convertedMaxNumberRef )
        lineForAllocated = "=" * getConvertedNumberForGraph( 
                timeAllocated, maxNumberRef, convertedMaxNumberRef )
        print termcolor.colored( lineForCompleted, color )
        print termcolor.colored( lineForAllocated, color )

def getTasksForProject( project ):
    with open( todoFile, "r" ) as f:
        return [ str( i + 1 ) + " " + x.strip() 
                 for i, x in enumerate( f.readlines() )
                 if project in x ]

def getPriority( task ):
    match = re.search( "^\d+\s+\((\w)\)", task )
    priority = 0
    if match:
        priority = 92 - ord( match.group( 1 ) )
    return priority
        
def taskComparator( task1, task2 ):
    return getPriority( task1 ) - getPriority( task2 )

def coloredTaskPrint( task ):
    priority = getPriority( task )
    if priority:
        colorMap = { 27: "yellow", 26: "green", 25: "blue",
                     24: "white" }
        print termcolor.colored( task, colorMap[ priority ] )
    else:
        print task

def doLs( projects=None ):
    allocations = projectsInAlloc()
    timeSpent = timeSpentOnWeek( None, projects=allocations.keys())
    selectedTasksForProject = collections.defaultdict( list )
    if not projects:
        projects = allocations.keys()
    for project in projects:
        timeAllocated = allocations[ project ]
        timeCompleted = timeSpent[ project ]
        tasksForProject = sorted( 
                getTasksForProject( project ), cmp=taskComparator,
                reverse=True )
        for task in tasksForProject:
            time = getMinorEst( task )
            timeCompleted += time
            selectedTasksForProject[ project ].append( task )
            if timeCompleted > timeAllocated:
                break
    for project, tasks in selectedTasksForProject.items():
        print termcolor.colored( project, "cyan" )
        for task in tasks:
            coloredTaskPrint( task )
        print ""

if action == "usage":
    print "todo.sh wp alloc[ations] ==> Display the current allocation"
    print "todo.sh wp sum[mary] ==> Display the summary for this week"
    print "todo.sh wp ls ==> Display the tasks for this week"
elif flag.startswith( "alloc" ):
    for project, timeMins in sorted( projectsInAlloc().items() ):
        print "%s:%s" % ( project, timeStr( timeMins ) )
elif flag == "ls":
    projects = None
    if len( sys.argv ) > 3 and sys.argv[ 3 ]:
        projects = [ sys.argv[ 3 ] ]
    doLs( projects )
elif flag == "graph":
    projects = None
    if len( sys.argv ) > 3 and sys.argv[ 3 ]:
        projects = [ sys.argv[ 3 ] ]
    printGraph( projects )
elif flag.startswith( "sum" ):
    dayOfWeek = datetime.date.today().isoformat()
    projects = None
    if len( sys.argv ) > 3 and sys.argv[ 3 ]:
        projects = [ sys.argv[ 3 ] ]
    if len( sys.argv ) > 4 and sys.argv[ 4 ]:
        dayOfWeek = sys.argv[ 4 ]
    summaryForWeek( dayOfWeek, projects )
elif flag == "add":
    if len( sys.argv ) < 4:
        print "Missing task !!"
    else:
        newTask = sys.argv[ 3 ] 
        doAddTask( newTask )
